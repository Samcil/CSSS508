king_raw %>%
select(Race) %>%
distinct(Race) %>%
tail(10)
king_raw %>%
select(LEG, CC, CG) %>%
summary()
king_raw %>%
filter(is.na(LEG)) %>%
head(10)
king_raw %>%
select(CounterGroup) %>%
distinct(CounterGroup)
king_raw %>%
group_by(Party) %>%
tally() %>%
arrange(desc(n))
king_raw %>%
select(CounterType) %>%
distinct() %>%
head(20)
king_raw %>%
select(SumOfCount) %>%
summary()
# info on the distinct races
races <- king_raw %>%
select(Race) %>%
distinct(Race) %>%
arrange(Race)
# print it out as a character vector
as.character(races$Race)
# make a character vector of relevant races
(rel_races <- races$Race[c(26, 79, 97)])
# subset the data to relevant races
king_rel_races <- king_raw %>%
filter(Race %in% rel_races)
precincts <- king_rel_races %>%
select(Precinct) %>%
distinct(Precinct) %>%
arrange(Precinct)
king_rel_races %>%
select(Precinct) %>%
distinct(Precinct) %>%
arrange(Precinct)
king_rel_races %>%
select(Precinct) %>%
distinct(Precinct) %>%
arrange(Precinct) %>% pull(Precinct)
# sum over rows besides "Registered Voters" or "Times Counted"
# within each precinct and race
times_counted_manual <- king_flag %>%
select(Precinct, Race, CounterType, SumOfCount) %>%
filter(CounterType != "Registered Voters" & CounterType != "Times Counted") %>%
group_by(Precinct, Race) %>%
summarize(votes_added_up = sum(SumOfCount))
king_seattle <- king_rel_races %>%
mutate(Location = ifelse(str_sub(Precinct, start = 1, stop = 4) == "SEA ",
"Seattle",
"Not Seattle"))
library(stringr)
king_seattle <- king_rel_races %>%
mutate(Location = ifelse(str_sub(Precinct, start = 1, stop = 4) == "SEA ",
"Seattle",
"Not Seattle"))
king_seattle <- king_rel_races %>%
mutate(Location = ifelse(str_sub(Precinct, 1, 4) == "SEA ",
"Seattle",
"Not Seattle"))
# sum over rows besides "Registered Voters" or "Times Counted"
# within each precinct and race
times_counted_manual <- king_seattle %>%
select(Precinct, Race, CounterType, SumOfCount) %>%
filter(CounterType != "Registered Voters" & CounterType != "Times Counted") %>%
group_by(Precinct, Race) %>%
summarize(votes_added_up = sum(SumOfCount))
head(times_counted_manual)
# now just grab the "Times Counted" rows and merge
times_counted_compare <- king_seattle %>%
select(Precinct, Race, CounterType, SumOfCount) %>%
filter(CounterType == "Times Counted") %>%
# rename the column on filtered data for clarity
rename(times_counted_value = SumOfCount) %>%
left_join(times_counted_manual,
by = c("Precinct", "Race")) %>%
# compute differences
mutate(diff = times_counted_value - votes_added_up)
summary(times_counted_compare$diff)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(forcats)
king_seattle %>%
select(Race, Party, CounterType) %>%
distinct()
candidate_vote_rows <- king_seattle %>%
# keep just not NP rows, or write-in rows
filter(Party != "NP" | CounterType == "Write-In") %>%
select(Precinct, Location, Race, Party, CounterType, SumOfCount)
# sum over all votes for candidates within a precinct and race
total_candidate_votes <- candidate_vote_rows %>%
group_by(Precinct, Location, Race) %>%
summarize(total_candidate_votes  = sum(SumOfCount))
candidate_vote_rows %>%
select(Race, Party, CounterType) %>%
distinct()
# subset to votes for Democrat candidate
democratic_vote_rows <- candidate_vote_rows %>%
filter(Party %in% c("Dem", "DPN")) %>%
select(Precinct, Location, Race, SumOfCount) %>%
# rename the count to be informative
rename(dem_votes = SumOfCount)
democrat_vote_rates <- democratic_vote_rows %>%
left_join(total_candidate_votes,
by = c("Precinct", "Location", "Race")) %>%
mutate(`Democrat support` = dem_votes / total_candidate_votes) %>%
select(Precinct, Location, Race, `Democrat support`)
head(democrat_vote_rates)
# load the libraries
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(stringr)
# make my vector of filenames in the open_data_year_one folder
(files_in_year_one <- list.files("open_data_year_one"))
# remove the status data and README
(files_in_year_one <- files_in_year_one[-c(2, 5)])
data_list <- vector("list", length(files_in_year_one))
(data_list_names <- str_sub(files_in_year_one, 6, -4))
names(data_list) <- data_list_names
data_list
# load the libraries
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(stringr)
# make my vector of filenames in the open_data_year_one folder
(files_in_year_one <- list.files("open_data_year_one"))
# remove the status data and README
(files_in_year_one <- files_in_year_one[-c(2, 5)])
data_list <- vector("list", length(files_in_year_one))
(data_list_names <- str_sub(files_in_year_one, 6, -4))
(data_list_names <- str_sub(files_in_year_one, 6, -5))
# load the libraries
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(stringr)
# make my vector of filenames in the open_data_year_one folder
(files_in_year_one <- list.files("open_data_year_one"))
# remove the status data and README
(files_in_year_one <- files_in_year_one[-c(2, 5)])
data_list <- vector("list", length(files_in_year_one))
(data_list_names <- str_sub(files_in_year_one, 6, -5))
names(data_list) <- data_list_names
data_list
# read in the data in the open_data_year_one folder
# paste0 to get the filepaths right
for(i in seq_along(files_in_year_one)) {
data_list[[i]] <- read_csv(paste0("open_data_year_one/", files_in_year_one[i]))
}
# make gender Unknown when user is a short term ride
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate(gender = ifelse(usertype == "Short-Term Pass Holder",
"Unknown", gender))
# make the date-times valid:
# station_data: make online a date
data_list[["station_data"]] <- data_list[["station_data"]] %>%
mutate(online=mdy(online))
# trip_data: starttime, stoptime should be date-time
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate_at(vars(starttime, stoptime), ~ mdy_hm(.))
# weather_data: make Date a date
data_list[["weather_data"]] <- data_list[["weather_data"]] %>%
mutate(Date=mdy(Date))
# change variables with a few values to factors:
# trip_data: usertype, gender
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate_at(vars(usertype, gender), ~ factor(.))
# function to return the alpha part of a string before the hyphen
region_extract <- function(x) {
beg_letters <- "^[A-Z]*" # matches uppercase letters from beginning, as many times as needed, until runs into some other kind of character
return(str_extract(x, beg_letters))
}
# test it out:
region_extract(x = c("CBD-11", "ID-01"))
# station_data: get region from terminal
data_list[["station_data"]] <- data_list[["station_data"]] %>%
mutate(terminal_region = region_extract(terminal))
# trip_data: get region from to_station_id and from_station_id
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate(to_station_region = region_extract(to_station_id),
from_station_region = region_extract(from_station_id))
# if we see "Rain" in Events on weather_data, flag it
data_list[["weather_data"]] <- data_list[["weather_data"]] %>%
mutate(Rain = ifelse(str_detect(Events, "Rain"),
"Rain",
"No rain")) %>%
# a lot of days had no events recorded -- say "No rain" on these
mutate(Rain = ifelse(is.na(Rain),
"No rain",
Rain)) %>%
# make it a factor
mutate(Rain = factor(Rain))
trips_weather <- data_list[["trip_data"]] %>%
# make a column for just the date, in "Date" format
mutate(Date = as.Date(starttime)) %>%
# merge onto weather data, with just the Date and Rain columns
left_join(data_list[["weather_data"]] %>%
# use as.Date to make sure it ends up in "Date" format
mutate(Date = as.Date(Date)),
by = "Date")
names(data_list) <- data_list_names
data_list
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(forcats)
king_raw <- read_csv("king_county_elections_2016.txt")
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(comment = "##")
library(xaringanthemer)
source("../csss508css.R")
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
geom_line(aes(color = "Country")) + #<<
geom_line(stat = "smooth", method = "loess",
aes(group = continent, color = "Continent")) + #<<
facet_wrap(~ continent, nrow = 2) +
scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) #<<
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(comment = "##")
library(xaringanthemer)
source("../csss508css.R")
new.object <- 1:10 # Making vector of 1 to 10
save(new.object, file="new_object.RData")
load("new_object.RData")
getwd()
library(gapminder)
str(gapminder)
library(dplyr)
log(mean(gapminder$pop))
gapminder$pop %>% mean() %>% log()
gapminder %>% filter(country == "Oman")
gapminder %>%
filter(country == "Oman" &
year > 1980 &
year <= 2000 )
China <- gapminder %>% filter(country == "China")
head(China, 4)
plot(lifeExp ~ year, data = China, xlab = "Year", ylab = "Life expectancy",
main = "Life expectancy in China", col = "red", cex = 1, pch = 16)
library(ggplot2)
ggplot(data = China, aes(x = year, y = lifeExp)) +
geom_point()
ggplot(data = China,
aes(x = year, y = lifeExp))
ggplot(data = China,
aes(x = year, y = lifeExp)) +
geom_point()
ggplot(data = China,
aes(x = year, y = lifeExp)) +
geom_point(color = "red", size = 3)
ggplot(data = China,
aes(x = year, y = lifeExp)) +
geom_point(color = "red", size = 3) +
xlab("Year")
ggplot(data = China,
aes(x = year, y = lifeExp)) +
geom_point(color = "red", size = 3) +
xlab("Year") +
ylab("Life expectancy")
ggplot(data = China,
aes(x = year, y = lifeExp)) +
geom_point(color = "red", size = 3) +
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy in China")
ggplot(data = China,
aes(x = year, y = lifeExp)) +
geom_point(color = "red", size = 3) +
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy in China") +
theme_bw() #<<
ggplot(data = China,
aes(x = year, y = lifeExp)) +
geom_point(color = "red", size = 3) +
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy in China") +
theme_bw(base_size=18) #<<
ggplot(data = gapminder, #<<
aes(x = year, y = lifeExp)) +
geom_point(color = "red", size = 3) +
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy over time") +
theme_bw(base_size=18)
ggplot(data = gapminder,
aes(x = year, y = lifeExp)) +
geom_line(color = "red", size = 3) + #<<
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy over time") +
theme_bw(base_size=18)
ggplot(data = gapminder,
aes(x = year, y = lifeExp,
group = country)) + #<<
geom_line(color = "red", size = 3) +
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy over time") +
theme_bw(base_size=18)
ggplot(data = gapminder,
aes(x = year, y = lifeExp,
group = country)) +
geom_line(color = "red") + #<<
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy over time") +
theme_bw(base_size=18)
ggplot(data = gapminder,
aes(x = year, y = lifeExp,
group = country,
color = continent)) + #<<
geom_line() + #<<
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy over time") +
theme_bw(base_size=18) #<<
ggplot(data = gapminder,
aes(x = year, y = lifeExp,
group = country,
color = continent)) +
geom_line() +
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy over time") +
theme_bw(base_size=18) +
facet_wrap(~ continent) #<<
ggplot(data = gapminder,
aes(x = year, y = lifeExp,
group = country,
color = continent)) +
geom_line() +
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy over time") +
theme_bw() + #<<
facet_wrap(~ continent)
lifeExp_by_year <-
ggplot(data = gapminder,
aes(x = year, y = lifeExp,
group = country, color = continent)) +
geom_line() +
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy over time") +
theme_bw() +
facet_wrap(~ continent)
lifeExp_by_year
lifeExp_by_year +
theme(legend.position = "bottom")
ggplot(data = gapminder, aes(x = continent, y = year, color = continent)) +
geom_point()
ggplot(data = gapminder, aes(x = continent, y = year, color = continent)) +
geom_point(position = position_jitter(width = 0.5, height = 2))
ggplot(data = China, aes(x = year, y = gdpPercap)) +
geom_line() +
scale_y_log10(breaks = c(1000, 2000, 3000, 4000, 5000), #<<
labels = scales::dollar) + #<<
xlim(1940, 2010) + ggtitle("Chinese GDP per capita")
ggplot(data = China, aes(x = year, y = lifeExp)) +
geom_line() +
ggtitle("Chinese life expectancy") +
theme_gray(base_size = 20) #<<
lifeExp_by_year +
scale_color_manual(
name = "Which\ncontinent\nare we\nlooking at?", # \n adds a line break #<<
values = c("Africa" = "seagreen", "Americas" = "turquoise1",
"Asia" = "royalblue", "Europe" = "violetred1", "Oceania" = "yellow"))
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) #<<
#
#
#
#
#
#
#
#
#
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
geom_line() #<<
#
#
#
#
#
#
#
#
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
geom_line() +
geom_line(stat = "smooth", method = "loess", #<<
aes(group = continent)) #<<
#
#
#
#
#
#
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
geom_line() +
geom_line(stat = "smooth", method = "loess",
aes(group = continent)) +
facet_wrap(~ continent, nrow = 2) #<<
#
#
#
#
#
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
geom_line(aes(color = "Country")) + #<<
geom_line(stat = "smooth", method = "loess",
aes(group = continent, color = "Continent")) + #<<
facet_wrap(~ continent, nrow = 2) +
scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) #<<
#
#
#
#
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
geom_line(aes(color = "Country", size = "Country")) + #<<
geom_line(stat = "smooth", method = "loess",
aes(group = continent, color = "Continent", size = "Continent")) + #<<
facet_wrap(~ continent, nrow = 2) +
scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3)) #<<
#
#
#
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
geom_line(alpha = 0.5, aes(color = "Country", size = "Country")) + #<<
geom_line(stat = "smooth", method = "loess",
aes(group = continent, color = "Continent", size = "Continent"), alpha = 0.5) + #<<
facet_wrap(~ continent, nrow = 2) +
scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3))
#
#
#
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
geom_line(alpha = 0.5, aes(color = "Country", size = "Country")) +
geom_line(stat = "smooth", method = "loess",
aes(group = continent, color = "Continent", size = "Continent"), alpha = 0.5) +
facet_wrap(~ continent, nrow = 2) +
scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3)) +
theme_minimal(base_size = 14) + ylab("Years") + xlab("") #<<
#
#
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
geom_line(alpha = 0.5, aes(color = "Country", size = "Country")) +
geom_line(stat = "smooth", method = "loess",
aes(group = continent, color = "Continent", size = "Continent"), alpha = 0.5) +
facet_wrap(~ continent, nrow = 2) +
scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3)) +
theme_minimal(base_size = 14) + ylab("Years") + xlab("") +
ggtitle("Life Expectancy, 1952-2007", subtitle = "By continent and country") #<<
#
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
geom_line(alpha = 0.5, aes(color = "Country", size = "Country")) +
geom_line(stat = "smooth", method = "loess",
aes(group = continent, color = "Continent", size = "Continent"), alpha = 0.5) +
facet_wrap(~ continent, nrow = 2) +
scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3)) +
theme_minimal(base_size = 14) + ylab("Years") + xlab("") +
ggtitle("Life Expectancy, 1952-2007", subtitle = "By continent and country") +
theme(axis.text.x = element_text(angle = 45)) #<<
summary(mtcars)
sr(mtcars)
str(mtcars)
summary(mtcars)
str(mtcars)
rstudioDiagnosticsReport()
render_and_print_slides <- function(week){
week_dir     <- paste0(getwd(), "/Lectures/", "Week", week, "/")
current_rmd  <- paste0(week_dir, stringr::str_subset(list.files(week_dir),
"^CSSS508_Week.*\\.Rmd$"))
rmarkdown::render(current_rmd, encoding = "UTF-8")
current_html <- stringr::str_replace(current_rmd,  "\\.Rmd",  "\\.html")
new_pdf_file <- stringr::str_replace(current_html, "\\.html", "\\.pdf")
new_r_script <- stringr::str_replace(current_html, "\\.html", "\\.R")
message("Slides rendered, waiting 5 seconds.")
Sys.sleep(5)
message("Purling slides.")
knitr::purl(input = current_rmd, output = new_r_script, documentation = 0)
message("Printing from Chrome.")
pagedown::chrome_print(current_html, format="pdf")
message(paste0("Printing complete at ", week_dir))
}
render_and_print_slides(9)
