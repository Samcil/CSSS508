tes_chars %>%
gt() %>%
gtsave("img/sw_table_1.png")
tes_chars %>%
group_by(starships) %>%
gt() %>% gtsave("img/sw_table_2.png")
tes_chars %>%
group_by(starships) %>%
gt(rowname_col = "name") %>%
gtsave("img/sw_table_3.png")
tes_chars %>%
group_by(starships) %>%
gt(rowname_col = "name") %>%
tab_header(
title = "Star Wars Characters",
subtitle = "The Empire Strikes Back"
) %>% gtsave("img/sw_table_4.png")
tes_chars %>%
group_by(starships) %>%
gt(rowname_col = "name") %>%
tab_header(
title = "Star Wars Characters",
subtitle = "The Empire Strikes Back"
) %>%
tab_spanner(
label = "Vitals",
columns = vars(mass, height)
) %>% gtsave("img/sw_table_5.png")
tes_chars %>%
group_by(starships) %>%
gt(rowname_col = "name") %>%
tab_header(
title = "Star Wars Characters",
subtitle = "The Empire Strikes Back"
) %>%
tab_spanner(
label = "Vitals",
columns = vars(mass, height)
) %>%
cols_label(
mass = "Mass (kg)",
height = "Height (cm)",
species = "Species"
) %>% gtsave("img/sw_table_6.png")
tes_chars %>%
group_by(starships) %>%
gt(rowname_col = "name") %>%
tab_header(
title = "Star Wars Characters",
subtitle = "The Empire Strikes Back"
) %>%
tab_spanner(
label = "Vitals",
columns = vars(mass, height)
) %>%
cols_label(
mass = "Mass (kg)",
height = "Height (cm)",
species = "Species"
) %>%
fmt_number(
columns = vars(mass),
decimals = 0
) %>% gtsave("img/sw_table_7.png")
tes_chars %>%
group_by(starships) %>%
gt(rowname_col = "name") %>%
tab_header(
title = "Star Wars Characters",
subtitle = "The Empire Strikes Back"
) %>%
tab_spanner(
label = "Vitals",
columns = vars(mass, height)
) %>%
cols_label(
mass = "Mass (kg)",
height = "Height (cm)",
species = "Species"
) %>%
fmt_number(
columns = vars(mass),
decimals = 0
) %>%
cols_align(
align = "center",
columns = vars(species, mass, height)
) %>% gtsave("img/sw_table_8.png")
tes_chars %>%
group_by(starships) %>%
gt(rowname_col = "name") %>%
tab_header(
title = "Star Wars Characters",
subtitle = "The Empire Strikes Back"
) %>%
tab_spanner(
label = "Vitals",
columns = vars(mass, height)
) %>%
cols_label(
mass = "Mass (kg)",
height = "Height (cm)",
species = "Species"
) %>%
fmt_number(
columns = vars(mass),
decimals = 0
) %>%
cols_align(
align = "center",
columns = vars(species, mass, height)
) %>%
row_group_order(
groups = c("X-wing",
"Millennium Falcon")
) %>% gtsave("img/sw_table_9.png")
tes_chars %>%
gt() %>%
gtsave("img/sw_table_1.png")
tes_chars %>%
group_by(starships) %>%
gt(rowname_col = "name") %>%
tab_header(
title = "Star Wars Characters",
subtitle = "The Empire Strikes Back"
) %>%
tab_spanner(
label = "Vitals",
columns = vars(mass, height)
) %>%
cols_label(
mass = "Mass (kg)",
height = "Height (cm)",
species = "Species"
) %>%
fmt_number(
columns = vars(mass),
decimals = 0
) %>%
cols_align(
align = "center",
columns = vars(species, mass, height)
) %>%
row_group_order(
groups = c("X-wing",
"Millennium Falcon")
) %>% gtsave("img/sw_table_9.png")
library(modelsummary)
model_list <- list("Model 1" = model_1,
"Model 2" = model_2,
"Model 3" = model_3)
msummary(model_list)
msummary(model_list, output = "ex_table.png")
msummary(model_list, output = "gt") %>%
tab_header("Summary Table", "Models of mpg")
options(htmltools.dir.version = FALSE, width = 70)
knitr::opts_chunk$set(comment = "##")
library(gtsummary)
mtcars %>% tbl_summary()
mtcars %>% tbl_summary(by = "am")
?msummary
mtcars %>%
tbl_summary()
min(mtcars$mpg)
mean(mtcars$mpg)
median(mtcars$mpg)
quantile(mtcars$mpg)
mtcars %>%
select(1:9) %>%
tbl_summary()
mtcars %>%
dplyr::select(1:9) %>%
tbl_summary()
library(tidyverse)
mtcars %>%
select(1:9) %>%
tbl_summary(by = "am") %>%
as_gt() %>%
tab_spanner(label = "Transmission", columns = starts_with("stat_"))
library(gt)
mtcars %>%
select(1:9) %>%
tbl_summary(by = "am") %>%
as_gt() %>%
tab_spanner(label = "Transmission", columns = starts_with("stat_"))
mtcars
mtcars %>%
select(1:9) %>%
tbl_summary(by = "am") %>%
as_gt() %>%
tab_spanner(label = "Transmission",
columns = starts_with("stat_")) %>%
tab_header("Motor Trend Cars", subtitle = "Descriptive Statistics")
mtcars %>%
select(1:9) %>%
tbl_summary()
mtcars %>%
select(1:9) %>%
tbl_summary() %>%
gtsave("img/gtsummary1.png")
mtcars %>%
select(1:9) %>%
tbl_summary()
mtcars %>%
select(1:9) %>%
tbl_summary(by = "am") %>%
as_gt() %>%
tab_spanner(label = "Transmission",
columns = starts_with("stat_")) %>%
tab_header("Motor Trend Cars",
subtitle = "Descriptive Statistics") %>%
gtsave("img/gtsummary.png")
library(stringr)
library(readr)
library(dplyr)
library(lubridate)
(year_one <- list.files("open_data_year_one"))
(year_one <- year_one[-c(2, 5)])
library(stringr)
library(readr)
library(dplyr)
library(lubridate)
(year_one <- list.files("open_data_year_one"))
(year_one <- year_one[-c(2, 5)])
files_in_year_one <-list.files("./open_data_year_one")[-c(2,5)]
data_list <- vector("list", length(files_in_year_one))
library(stringr)
data_list_names <- str_sub(files_in_year_one, 6,-5)
names(data_list) <- data_list_names
library(readr)
for(i in seq_along(files_in_year_one)){
data_list[[i]] <- read_csv(paste0("open_data_year_one/", files_in_year_one[i]))
}
str(data_list[["trip_data"]])
names(data_list)
library(dplyr)
data_list[["trip_data"]] %>% count(gender, usertype)
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate(gender
= ifelse(usertype=="Short-Term Pass Holder", "Unknown",gender))
library(lubridate)
names(data_list)
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate_at(vars(starttime, stoptime), ~mdy_hm(.))
data_list[["weather_data"]] <-data_list[["weather_data"]] %>%
mutate(Date = mdy(Date))
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate_at(vars(usertype, gender), as.factor)
str(data_list[["trip_data"]])
ex_string <- c("CBD-11", "ID-01", "UW-02")
str_replace(ex_string, "-.*$", "")
str_extract(ex_string, "[^-]+")
str_extract(ex_string,"[A-Z]*")
region_extract <- function(x){
str_replace(x, "-.*$", "")
}
region_extract(x = c("CBD-11", "ID-01"))
data_list[["station_data"]] <- data_list[["station_data"]] %>% mutate(terminal_region = region_extract(terminal))
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate(to_station_region = region_extract(to_station_id),
from_station_region = region_extract(from_station_id))
data_list[["weather_data"]] %>% distinct(Events)
data_list[["weather_data"]]<-data_list[["weather_data"]] %>%
mutate(Rain = ifelse(str_detect(Events, "Rain"), "Rain", "No rain")) %>% tidyr::replace_na(list(Rain = "No rain"))
trips_weather <- data_list[["trip_data"]] %>%
mutate(Date = date(starttime)) %>%
left_join(data_list[["weather_data"]], by = "Date")
daily_rain_rides <- function(region_code, direction){
if(direction=="to"){
temp_df <- trips_weather %>% filter(to_station_region == region_code)
} else if(direction == "from"){
temp_df <- trips_weather %>% filter(from_station_region == region_code)
}
temp_df <- temp_df %>% count(Date, Rain)
ggplot(temp_df, aes(x = Date, y = n, color = Rain))+
geom_point() +
scale_color_manual(
name = "Rain",
values = c("Rain" = "black",
"No rain" = "deepskyblue"))
+ggtitle(paste("Daily rides going", direction, region_code)) +
theme_minimal() + geom_smooth()
}
daily_rain_rides("ID","from")
daily_rain_rides <- function(region_code, direction){
if(direction=="to"){
temp_df <- trips_weather %>% filter(to_station_region == region_code)
} else if(direction == "from"){
temp_df <- trips_weather %>% filter(from_station_region == region_code)
}
temp_df <- temp_df %>% count(Date, Rain)
ggplot(temp_df, aes(x = Date, y = n, color = Rain))+
geom_point() +
scale_color_manual(
name = "Rain",
values = c("Rain" = "black",
"No rain" = "deepskyblue"))+
ggtitle(paste("Daily rides going", direction, region_code)) +
theme_minimal() + geom_smooth()
}
daily_rain_rides("ID","from")
daily_rain_rides("UW","to")
daily_rain_rides("CBD","from")
files_in_year_one <- list.files("./open_data_year_one")[-c(4)]
files_in_year_one
data_list <-vector("list", length(files_in_year_one))
library(stringr)
data_list_names <- str_sub(files_in_year_one, 6, -5)
names(data_list) <- data_list_names
library(readr)
for(i in seq_along(files_in_year_one)){
data_list[[i]] <-read_csv(paste0("open_data_year_one/", files_in_year_one[i]))
}
read_our_files <- function(x){
read_csv(paste0("open_data_year_one/", files_in_year_one[x]))
}
data_list_2 <-lapply(seq_along(files_in_year_one), read_our_files)
list.files("./open_data_year_one")[-c(2,5)]
files_in_year_one <- list.files("./open_data_year_one")[-c(2,5)]
files_in_year_one
data_list <-vector("list", length(files_in_year_one))
library(stringr)
data_list_names <- str_sub(files_in_year_one, 6, -5)
names(data_list) <- data_list_names
library(readr)
for(i in seq_along(files_in_year_one)){
data_list[[i]] <-read_csv(paste0("open_data_year_one/", files_in_year_one[i]))
}
read_our_files <- function(x){
read_csv(paste0("open_data_year_one/", files_in_year_one[x]))
}
data_list_2 <-lapply(seq_along(files_in_year_one), read_our_files)
str(data_list)
library(dplyr)
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate(gender=
ifelse(usertype =="Short-Term Pass Holder", "Unknown", gender))
library(lubridate)
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate_at(vars(starttime, stoptime), mdy_hm)
data_list[["weather_data"]] <- data_list[["weather_data"]] %>%
mutate(Date = mdy(Date))
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate_at(vars(usertype, gender), as.factor)
str(data_list[["trip_data"]])
region_extract <- function(x){
str_replace(x, "-.*$","")
}
region_extract(x = c("CBD-11", "ID-01"))
data_list[["station_data"]] <- data_list[["station_data"]] %>%
mutate(terminal_region = region_extract(terminal))
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate(to_station_region = region_extract(to_station_id),
from_station_region = region_extract(from_station_id))
data_list[["weather_data"]] %>% distinct(Events)
data_list[["weather_data"]] %>%
mutate(Rain = ifelse(str_detect(Events, "Rain"), "Rain", "No rain")) %>%
tidyr::replace_na(list(Rain = "No rain"))
trips_weather <- data_list[["trip_data"]] %>%
mutate(Date = date(starttime)) %>%
left_join(data_list[["weather_data"]], by = "Date")
trips_weather
daily_rain_rides <- function(region_code, direction){
if(direction == "to"){
temp_df <- trips_weather %>%
filter(to_station_region == region_code)
} else if(direction == "from"){
temp_df <- trips_weather %>% filter(from_station_region == region_code)
}
temp_df <- temp_df %>% count(Date, Rain)
ggplot(temp_df, aes(x = Date, y = n, color = Rain)) +
geom_point() + scale_color_manual(
name = "Rain",
values = c("Rain" = "black",
"No rain" = "deepskyblue")) +
ggtitle(paste("Daily rides going", direction, region_code))+
theme_minimal()
}
daily_rain_rides("PS", "from")
trips_weather
data_list[["weather_data"]]  <- data_list[["weather_data"]] %>%
mutate(Rain = ifelse(str_detect(Events, "Rain"), "Rain", "No rain")) %>%
tidyr::replace_na(list(Rain = "No rain"))
trips_weather <- data_list[["trip_data"]] %>%
mutate(Date = date(starttime)) %>%
left_join(data_list[["weather_data"]], by = "Date")
trips_weather
daily_rain_rides <- function(region_code, direction){
if(direction == "to"){
temp_df <- trips_weather %>%
filter(to_station_region == region_code)
} else if(direction == "from"){
temp_df <- trips_weather %>% filter(from_station_region == region_code)
}
temp_df <- temp_df %>% count(Date, Rain)
ggplot(temp_df, aes(x = Date, y = n, color = Rain)) +
geom_point() + scale_color_manual(
name = "Rain",
values = c("Rain" = "black",
"No rain" = "deepskyblue")) +
ggtitle(paste("Daily rides going", direction, region_code))+
theme_minimal()
}
daily_rain_rides("PS", "from")
daily_rain_rides("PS", "from")
exp(3)
render_and_print_slides <- function(week){
week_dir     <- paste0(getwd(), "/Lectures/", "Week", week, "/")
current_rmd  <- paste0(week_dir, stringr::str_subset(list.files(week_dir),
"^CSSS508_Week.*\\.Rmd$"))
rmarkdown::render(current_rmd, encoding = "UTF-8")
current_html <- stringr::str_replace(current_rmd,  "\\.Rmd",  "\\.html")
new_pdf_file <- stringr::str_replace(current_html, "\\.html", "\\.pdf")
new_r_script <- stringr::str_replace(current_html, "\\.html", "\\.R")
message("Slides rendered, waiting 5 seconds.")
Sys.sleep(5)
message("Purling slides.")
knitr::purl(input = current_rmd, output = new_r_script, documentation = 0)
message("Printing from Chrome.")
pagedown::chrome_print(current_html, format="pdf")
message(paste0("Printing complete at ", week_dir))
}
render_and_print_slides(10)
render_and_print_slides(10)
# DO NOT EDIT ANY PART OF THIS CHUNK
# Do examine the code if you're interested how it works!
knitr::opts_chunk$set(echo = TRUE, warning=TRUE, message=TRUE)
library(tidyverse)
set.seed(7)
test_x <- function(x=NULL, class="omit", dims="omit", numeric="omit",
nam_pos="omit", nam_val="omit", c_pos="omit", c_val="omit",
na_check="omit"){
if(is.null(x)){
return(message("No code entered yet."))
} else {
class_x  <- ifelse(class!="omit", class(x)==class, TRUE)
num_x    <- ifelse(numeric!="omit", is.numeric(x)==numeric, TRUE)
dim_x    <- ifelse(all(dims!="omit"),
ifelse(is.null(dim(x)), length(x)==dims, all(dim(x)==dims) ),
TRUE)
names_x  <- ifelse(nam_val!="omit" & nam_pos!="omit",
ifelse(is.null(names(x)), FALSE, names(x)[nam_pos]==nam_val), TRUE)
if(any(c_val=="omit") | any(c_pos=="omit")){ check_x <- TRUE
} else {
if(length(c_pos)==1 & class_x!="list"){ check_x <- x[c_pos]==c_val
} else {
if(class=="matrix" | class=="data.frame"){ check_x <- x[ c_pos[1], c_pos[2] ]==c_val
} else {
if(class=="list" & length(c_pos)==2){ check_x <- x[[ c_pos[1] ]][[ c_pos[2] ]]==c_val
} else {
if(class=="list" & length(c_pos)==3){ check_x <- x[[ c_pos[1] ]][[c_pos[2] ]][[ c_pos[3] ]]==c_val
}
}
}
}
}
if (all(na_check!="omit") & is.null(dim(x))){
na_x     <- any(is.na(x[na_check])==TRUE)==FALSE
} else {
if (all(na_check!= "omit") & is.null(dim(x))==FALSE & length(na_check)==2 ){
na_x     <- any(is.na(x[na_check[1], na_check[2]])==TRUE)==FALSE
} else {
if (all(na_check!= "omit") & is.null(dim(x))==FALSE & length(na_check)==1){
na_x     <- any(is.na(x[, na_check])==TRUE)==FALSE
} else {na_x <- TRUE}
}
}
if (all(c(class_x, dim_x, names_x, num_x, na_x, check_x)==TRUE)){
message("Good job on ", deparse(substitute(x)), "!\n")
} else {
message("Oh no, check your code for \"", deparse(substitute(x)), "\"\n")
if (dim_x==FALSE)   message("- Wrong length or dimensions!\n")
if (class_x==FALSE) message("- Wrong object class!\n")
if (names_x==FALSE) message("- Wrong object names!\n")
if (num_x==FALSE)   message("- Should this be numeric?\n")
if (na_x==FALSE)    message("- You seem to have data missing!\n")
if (check_x==FALSE) message("- You seem to have an incorrect value somewhere!\n")
}
}
}
# Ex 1) Create a vector of the numbers 1, 5, 3, 2, 4.
example <- NULL
# You would write this:
example <- c(1,5,3,2,4)
# Ex 2) Add the number 10 to the sixth position of example2
example2 <- example
example2 <- NULL
# You would write:
example2[6] <- 10
# 1) Use "seq()"" to create a vector of 10 numbers evenly spaced from 0 to 15.
vec_num <- seq(0,15, length.out=10)
# 2) Use ":" to create an integer vector of the numbers 11 through 20.
vec_int <- 11:20
# 3) Use "LETTERS" and "[ ]" to create a vector of the last 10 capital letters.
vec_cha <- LETTERS[17:26]
# 4) Use letters and "[ ]" to create a factor variable using the first ten lower case letters.
vec_fac <- factor(letters[1:9])
# 5) Use "c()" to combine "vec_cha" and "vec_fac" into "vec_let". Do not convert it to a factor!
vec_let <-  c(vec_cha, vec_fac)
# 6) Use "c()" and [ ] to combine the first 4 elements of "vec_num" with the last
# 4 elements of "vec_int" to create "vec_ni".
vec_ni <- c(vec_num[1:4], vec_int[-(1:6)])
# 7) Use "rev()" to reverse the order of "vec_fac".
fac_vec <- rev(vec_fac)
# DO NOT EDIT ANY PART OF THIS CHUNK
test_x(vec_num, class="numeric",   dims=10, c_pos=4,  c_val=5)
test_x(vec_int, class="integer",   dims=10, c_pos=5,  c_val=15)
test_x(vec_cha, class="character", dims=10, c_pos=3,  c_val="S")
test_x(vec_fac, class="factor",    dims=10, c_pos=7,  c_val="g")
test_x(vec_let, class="character", dims=20, c_pos=19, c_val="9")
test_x(vec_ni,  class="numeric",   dims=8,  c_pos=5,  c_val=17)
test_x(fac_vec, class="factor", dims=10, c_pos=4, c_val="g")
