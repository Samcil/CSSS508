log(mean(gapminder$pop))
gapminder$pop %>% mean() %>% log()
gapminder %>% filter(country == "Oman")
gapminder %>%
filter(country == "Oman" &
year > 1980 &
year <= 2000 )
China <- gapminder %>% filter(country == "China")
head(China, 4)
plot(lifeExp ~ year, data = China, xlab = "Year", ylab = "Life expectancy",
main = "Life expectancy in China", col = "red", cex = 1, pch = 16)
library(ggplot2)
ggplot(data = China, aes(x = year, y = lifeExp)) +
geom_point()
ggplot(data = China,
aes(x = year, y = lifeExp))
ggplot(data = China,
aes(x = year, y = lifeExp)) +
geom_point()
ggplot(data = China,
aes(x = year, y = lifeExp)) +
geom_point(color = "red", size = 3)
ggplot(data = China,
aes(x = year, y = lifeExp)) +
geom_point(color = "red", size = 3) +
xlab("Year")
ggplot(data = China,
aes(x = year, y = lifeExp)) +
geom_point(color = "red", size = 3) +
xlab("Year") +
ylab("Life expectancy")
ggplot(data = China,
aes(x = year, y = lifeExp)) +
geom_point(color = "red", size = 3) +
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy in China")
ggplot(data = China,
aes(x = year, y = lifeExp)) +
geom_point(color = "red", size = 3) +
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy in China") +
theme_bw() #<<
ggplot(data = China,
aes(x = year, y = lifeExp)) +
geom_point(color = "red", size = 3) +
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy in China") +
theme_bw(base_size=18) #<<
ggplot(data = gapminder, #<<
aes(x = year, y = lifeExp)) +
geom_point(color = "red", size = 3) +
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy over time") +
theme_bw(base_size=18)
ggplot(data = gapminder,
aes(x = year, y = lifeExp)) +
geom_line(color = "red", size = 3) + #<<
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy over time") +
theme_bw(base_size=18)
ggplot(data = gapminder,
aes(x = year, y = lifeExp,
group = country)) + #<<
geom_line(color = "red", size = 3) +
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy over time") +
theme_bw(base_size=18)
ggplot(data = gapminder,
aes(x = year, y = lifeExp,
group = country)) +
geom_line(color = "red") + #<<
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy over time") +
theme_bw(base_size=18)
ggplot(data = gapminder,
aes(x = year, y = lifeExp,
group = country,
color = continent)) + #<<
geom_line() + #<<
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy over time") +
theme_bw(base_size=18) #<<
ggplot(data = gapminder,
aes(x = year, y = lifeExp,
group = country,
color = continent)) +
geom_line() +
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy over time") +
theme_bw(base_size=18) +
facet_wrap(~ continent) #<<
ggplot(data = gapminder,
aes(x = year, y = lifeExp,
group = country,
color = continent)) +
geom_line() +
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy over time") +
theme_bw() + #<<
facet_wrap(~ continent)
lifeExp_by_year <-
ggplot(data = gapminder,
aes(x = year, y = lifeExp,
group = country, color = continent)) +
geom_line() +
xlab("Year") +
ylab("Life expectancy") +
ggtitle("Life expectancy over time") +
theme_bw() +
facet_wrap(~ continent)
lifeExp_by_year
lifeExp_by_year +
theme(legend.position = "bottom")
ggplot(data = gapminder, aes(x = continent, y = year, color = continent)) +
geom_point()
ggplot(data = gapminder, aes(x = continent, y = year, color = continent)) +
geom_point(position = position_jitter(width = 0.5, height = 2))
ggplot(data = China, aes(x = year, y = gdpPercap)) +
geom_line() +
scale_y_log10(breaks = c(1000, 2000, 3000, 4000, 5000), #<<
labels = scales::dollar) + #<<
xlim(1940, 2010) + ggtitle("Chinese GDP per capita")
ggplot(data = China, aes(x = year, y = lifeExp)) +
geom_line() +
ggtitle("Chinese life expectancy") +
theme_gray(base_size = 20) #<<
lifeExp_by_year +
scale_color_manual(
name = "Which\ncontinent\nare we\nlooking at?", # \n adds a line break #<<
values = c("Africa" = "seagreen", "Americas" = "turquoise1",
"Asia" = "royalblue", "Europe" = "violetred1", "Oceania" = "yellow"))
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) #<<
#
#
#
#
#
#
#
#
#
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
geom_line() #<<
#
#
#
#
#
#
#
#
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
geom_line() +
geom_line(stat = "smooth", method = "loess", #<<
aes(group = continent)) #<<
#
#
#
#
#
#
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
geom_line() +
geom_line(stat = "smooth", method = "loess",
aes(group = continent)) +
facet_wrap(~ continent, nrow = 2) #<<
#
#
#
#
#
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
geom_line(aes(color = "Country")) + #<<
geom_line(stat = "smooth", method = "loess",
aes(group = continent, color = "Continent")) + #<<
facet_wrap(~ continent, nrow = 2) +
scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) #<<
#
#
#
#
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
geom_line(aes(color = "Country", size = "Country")) + #<<
geom_line(stat = "smooth", method = "loess",
aes(group = continent, color = "Continent", size = "Continent")) + #<<
facet_wrap(~ continent, nrow = 2) +
scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3)) #<<
#
#
#
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
geom_line(alpha = 0.5, aes(color = "Country", size = "Country")) + #<<
geom_line(stat = "smooth", method = "loess",
aes(group = continent, color = "Continent", size = "Continent"), alpha = 0.5) + #<<
facet_wrap(~ continent, nrow = 2) +
scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3))
#
#
#
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
geom_line(alpha = 0.5, aes(color = "Country", size = "Country")) +
geom_line(stat = "smooth", method = "loess",
aes(group = continent, color = "Continent", size = "Continent"), alpha = 0.5) +
facet_wrap(~ continent, nrow = 2) +
scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3)) +
theme_minimal(base_size = 14) + ylab("Years") + xlab("") #<<
#
#
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
geom_line(alpha = 0.5, aes(color = "Country", size = "Country")) +
geom_line(stat = "smooth", method = "loess",
aes(group = continent, color = "Continent", size = "Continent"), alpha = 0.5) +
facet_wrap(~ continent, nrow = 2) +
scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3)) +
theme_minimal(base_size = 14) + ylab("Years") + xlab("") +
ggtitle("Life Expectancy, 1952-2007", subtitle = "By continent and country") #<<
#
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
geom_line(alpha = 0.5, aes(color = "Country", size = "Country")) +
geom_line(stat = "smooth", method = "loess",
aes(group = continent, color = "Continent", size = "Continent"), alpha = 0.5) +
facet_wrap(~ continent, nrow = 2) +
scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3)) +
theme_minimal(base_size = 14) + ylab("Years") + xlab("") +
ggtitle("Life Expectancy, 1952-2007", subtitle = "By continent and country") +
theme(axis.text.x = element_text(angle = 45)) #<<
summary(mtcars)
sr(mtcars)
str(mtcars)
summary(mtcars)
str(mtcars)
rstudioDiagnosticsReport()
?ggplot2::scale_color_gradient2
Sys.which("make")
install.packages("devtools")
remotes::install_cran("tidyverse")
remotes::install_cran("knitr")
remotes::install_cran("rmarkdown")
remotes::install_cran("tidycensus")
remotes::install_cran(c("ggeffects", "gt", "sjPlot", "lme4", "lavaan", "pander"))
remotes::install_cran(c("gapminder", "nycflights13"))
remotes::install_cran("xaringan-themer")
remotes::install_cran("xaringanthemer")
remotes::install_cran(c("ggmap", "ggrepel", "pagedown", "bookdown"))
remotes::install_cran(c("corrplot"))
remotes::install_cran(c("modelsummary"))
options(htmltools.dir.version = FALSE, width = 70)
knitr::opts_chunk$set(comment = "##")
library(tidyverse)
library(pander)
library(knitr)
`%!in%` <- Negate(`%in%`)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
if (!is.null(n <- options$out.lines)) {
x = unlist(stringr::str_split(x, '\n'))
if (length(x) > n) {
# truncate the output
x = c(head(x, n), '....\n')
}
x = paste(x, collapse = '\n') # paste first n lines together
}
hook_output(x, options)
})
opts_chunk$set(out.lines = 20)
ex_dat <- data.frame(num1 = rnorm(200, 1, 2),
fac1 = sample(c(1, 2, 3), 200, TRUE),
num2 = rnorm(200, 0, 3),
fac2 = sample(c(1, 2))) %>%
mutate(yn = num1*0.5 + fac1*1.1 + num2*0.7 + fac2-1.5  + rnorm(200, 0, 2)) %>%
mutate(yb = as.numeric(yn > mean(yn))) %>%
mutate(fac1 = factor(fac1, labels=c("A", "B", "C")),
fac2 = factor(fac2, labels=c("Yes", "No")))
library(broom)
lm_1 <- lm(yn ~ num1 + fac1, data = ex_dat)
summary(lm_1)
glm_1 <- glm(yb ~ num1 + fac1, data = ex_dat, family=binomial(link="logit"))
summary(glm_1)
lm_1 %>% tidy()
glm_1 %>% tidy()
glance(lm_1)
augment(lm_1) %>% head()
ex_dat %>% group_by(fac1) %>% do(tidy(lm(yn ~  num1 + fac2 + num2, data = .))) #<<
library(gapminder)
ggplot(data = gapminder,
aes(x = year, y = lifeExp, color = continent)) +
geom_point(position = position_jitter(1,0), size = 0.5) +
geom_smooth()
ggplot(data = gapminder,
aes(x = year, y = lifeExp, color = continent)) +
geom_point(position = position_jitter(1,0), size = 0.5) +
geom_smooth(method = "glm", formula = y ~ x) #<<
ggplot(data = gapminder,
aes(x = year, y = lifeExp, color = continent)) +
geom_point(position = position_jitter(1,0), size = 0.5) +
geom_smooth(method = "glm", formula = y ~ poly(x, 2)) #<<
library(ggeffects)
ex_dat <- data.frame(num1 = rnorm(200, 1, 2),
fac1 = sample(c(1, 2, 3), 200, TRUE),
num2 = rnorm(200, 0, 3),
fac2 = sample(c(1, 2))) %>%
mutate(yn = num1 * 0.5 + fac1 * 1.1 + num2 * 0.7 +
fac2 - 1.5  + rnorm(200, 0, 2)) %>%
mutate(yb = as.numeric(yn > mean(yn))) %>%
mutate(fac1 = factor(fac1, labels = c("A", "B", "C")),
fac2 = factor(fac2, labels = c("Yes", "No")))
lm_1 <- lm(yn ~ num1 + fac1, data = ex_dat)
lm_1_est <- ggpredict(lm_1, terms = "num1")
lm_1_est
plot(lm_1_est)
glm(yb ~ num1 + fac1 + num2 + fac2, data = ex_dat, family=binomial(link = "logit")) %>%
ggpredict(terms = c("num1", "fac1")) %>% plot()
glm(yb ~ num1 + fac1 + num2 + fac2, data = ex_dat, family = binomial(link = "logit")) %>%
ggpredict(terms = c("num1", "fac1")) %>% plot(facet=TRUE)
glm(yb ~ num1 + fac1 + num2 + fac2, data=ex_dat, family=binomial(link="logit")) %>%
ggpredict(terms = c("num1 [-1,0,1]", "fac1 [A,B]")) %>% plot(facet=TRUE)
glm(yb ~ num1 + fac1 + num2 + fac2, data = ex_dat, family = binomial(link = "logit")) %>%
ggpredict(terms = c("num1 [meansd]", "num2 [minmax]")) %>% plot(facet=TRUE)
lm(yn ~ fac1 + fac2, data = ex_dat) %>%
ggpredict(terms=c("fac1", "fac2")) %>% plot()
library(pander)
panderOptions("table.style", "rmarkdown")
library(sjPlot)
# If you're seeing this, you are looking in my presentation files.
# I actually have to call on a saved image here because sjPlot
# doesn't display properly in .Rpres slides for some reason.
knitr::include_graphics("img/sjPlot_table.PNG")
# If you're seeing this, you are looking in my presentation files.
# I actually have to call on a saved image here because sjPlot
# doesn't display properly in .Rpres slides for some reason.
knitr::include_graphics("img/sjPlot_mtable.PNG")
knitr::include_graphics("img/sjPlot_likert.PNG")
knitr::include_graphics("img/sjPlot_crosstab.PNG")
library(modelsummary)
model_list <- list("Model 1" = model_1, "Model 2" = model_2, "Model 3" = model_3)
model_2 <- lm(mpg ~ hp + wt, data = mtcars)
model_3 <- lm(mpg ~ hp + wt + factor(am), data = mtcars)
tab_model(model_1, model_2, model_3)
model_2 <- lm(mpg ~ hp + wt, data = mtcars)
model_3 <- lm(mpg ~ hp + wt + factor(am), data = mtcars)
tab_model(model_1, model_2, model_3)
model_1 <- lm(mpg ~ wt, data = mtcars)
tab_model(model_1)
model_list <- list("Model 1" = model_1, "Model 2" = model_2, "Model 3" = model_3)
modelsummary(model_list)
msummary(model_list, output = "latex")
msummary(model_list, output = "ex_table_latex.tex")
webshot::install_phantomjs()
msummary(model_list, output = "gt")
library(gt)
msummary(model_list, output = "gt") %>%
tab_header("Summary Table", "Models of mpg")
#### Libraries ####
library(ggmap)
library(tidyverse)
library(readxl)
#### Importing Data ####
Cleaned_Locations_No_Zipcode <- read_excel("C:/Users/cclan/Downloads/survey_responses.xlsx",sheet = "Address (no Zipcode)")
Cleaned_Locations_With_Zipcode <- read_excel("C:/Users/cclan/Downloads/survey_responses.xlsx",sheet = "Address (w Zipcode)")
#### Geocoding Data ####
latlong_data_no_zipcode_used <- geocode(Cleaned_Locations_No_Zipcode[[1]])
Cleaned_Locations_No_Zipcode
Cleaned_Locations_No_Zipcode
geocode(Cleaned_Locations_No_Zipcode[[1]][8])
Cleaned_Locations_No_Zipcode[[1]][8]
str_replace(Cleaned_Locations_No_Zipcode[[1]][8], "&", "and")
geocode(str_replace(Cleaned_Locations_No_Zipcode[[1]][8], "&", "and"))
#### Geocoding Data ####
latlong_data_no_zipcode_used <- geocode(str_replace(Cleaned_Locations_No_Zipcode[[1]], "&", "and"))
options(htmltools.dir.version = FALSE, width = 70)
knitr::opts_chunk$set(comment = "##")
mtcars %>% gt()
library(gt)
mtcars %>% gt()
?mtcars
mtcars %>% gt() %>% tab_header("Motor Trend Car Road Tests", "1973-74 Models")
mtcars
mtcars %>% tibble::rownames_to_column("model") %>%
gt() %>% tab_header("Motor Trend Car Road Tests", "1973-74 Models")
mtcars %>% tibble::rownames_to_column("model") %>%\
mtcars %>% tibble::rownames_to_column("model") %>%
group_by(am) %>%
gt() %>% tab_header("Motor Trend Car Road Tests", "1973-74 Models")
starwars
?starwars
library(tidyverse)
starwars
starwars %>% unnest(films)
starwars %>% unnest(films) %>% nest(films)
?nest
starwars %>% unnest(films) %>% nest(films = c(films))
49*2.25
77*2.25
options(htmltools.dir.version = FALSE, width = 70)
knitr::opts_chunk$set(comment = "##")
starwars %>% select(name, species, homeworld) %>%
group_by(species) %>%
gt()
library(gt)
starwars %>% select(name, species, homeworld) %>%
group_by(species) %>%
gt()
??dplyr
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(stringr)
getwd()
list.files("../open_data_year_one") #.. tells us to give the prior directory
files_in_year_one <- list.files("./open_data_year_one") [-c(2,5)]
data_list <- vector("list", length(files_in_year_one))
#We create the vector with a list b/c loops require an empty object for the #output for the vector; the length will be the number of files that are in #the files of stated folder
data_list_names <- str_sub(files_in_year_one, 6, -5)
names(data_list) <- data_list_names
for(i in seq_along(files_in_year_one)) {
data_list[[i]] <- read_csv(paste0("open_data_year_one/",        files_in_year_one[i]))
}
#This is the same thing our loop is doing but manually
#data_list[[1]] <- read_csv(paste0("open_data_year_one/", files_in_year_one[1]))
#data_list[[2]] <- read_csv(paste0("open_data_year_one/", files_in_year_one[2]))
#data_list[[3]] <- read_csv(paste0("open_data_year_one/", files_in_year_one[3]))
#remember to use double brackets for subsetting an object of that element; #single gives a subset of a list
read_csv("open_data_year_one/2015_station_data.csv")
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(stringr)
getwd()
list.files("../open_data_year_one") #.. tells us to give the prior directory
files_in_year_one <- list.files("./open_data_year_one") [-c(2,5)]
data_list <- vector("list", length(files_in_year_one))
#We create the vector with a list b/c loops require an empty object for the #output for the vector; the length will be the number of files that are in #the files of stated folder
data_list_names <- str_sub(files_in_year_one, 6, -5)
names(data_list) <- data_list_names
for(i in seq_along(files_in_year_one)) {
data_list[[i]] <- read_csv(paste0("open_data_year_one/",        files_in_year_one[i]))
}
#This is the same thing our loop is doing but manually
#data_list[[1]] <- read_csv(paste0("open_data_year_one/", files_in_year_one[1]))
#data_list[[2]] <- read_csv(paste0("open_data_year_one/", files_in_year_one[2]))
#data_list[[3]] <- read_csv(paste0("open_data_year_one/", files_in_year_one[3]))
#remember to use double brackets for subsetting an object of that element; #single gives a subset of a list
read_csv("open_data_year_one/2015_station_data.csv")
#read_csv(files_in_year_one[1]) ... is the same as
#read_csv("open_data_year_one/2015_station_data.csv")
read_our_files <- function(i){
read_csv(paste0("open_data_year_one/", files_in_year_one[i]))
}
data_list_2 <- lapply(seq_along(files_in_year_one), read_our_files)
#another way to use lapply
#data_list_3 <- lapply(seq_along(files_in_year_one),
#                function(i){
#  read_csv(paste0("open_data_year_one/", files_in_year_one[i]))
#})
#you can reiterate over files names using...]
#read_our_files_2 <- function(i){
#  read_csv(paste0("open_data_year_one/", files_in_year_one[i]))
#}
#lapply(seq_along(files_in_year_one), read_our_files_2)
#library(vroom)
#data_list_3 <- vroom(paste0("open_data_year_one/", files_in_year_one[i]))
str(data_list)
names(data_list)
#How to check for missing values/data
data_list[["trip_data"]] %>% distinct(gender)
data_list[["trip_data"]] %>% count(gender)
data_list[["trip_data"]] %>% count(gender, usertype)
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate(gender =
ifelse (usertype=="Short-Term Pass Holder", "Unknown", gender))
data_list[["trip_data"]] %>% count(gender, usertype)
str(data_list)
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate_at(vars(starttime,stoptime), ~mdy_hm(.))
data_list[["weather_data"]] <- data_list[["weather_data"]] %>%
mutate(Date = mdy(Date))
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate_at(vars(usertype, gender), as.factor)
str(data_list[["trip_data"]])
data_list[["trip_data"]] %>% distinct(to_station_id)
data_list[["station_data"]] %>% distinct(terminal)
terminals <- data_list[["station_data"]] %>% distinct(terminal)
to_stations <- data_list[["trip_data"]] %>% distinct(to_station_id)
from_stations <- data_list[["trip_data"]] %>% distinct(from_station_id)
region_extract <- function(x, na.rm = FALSE) {
station_id_pattern <- x("^[A-Z]*-?")
str_extract(station_id_pattern)
return("station_id_pattern", station_id_pattern)
}
#mutate(character_only = str_extract(station_id_pattern))
data_list[["station_data"]] %>%
region_extract(from_stations_char)
data_list[["trip_data"]] %>% distinct(to_station_id)
data_list[["station_data"]] %>% distinct(terminal)
data_list[["station_data"]]
